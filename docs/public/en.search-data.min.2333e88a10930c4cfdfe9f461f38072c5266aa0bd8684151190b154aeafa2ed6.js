'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/keycloakmigration/migrations/migrations/','title':"Available Actions",'content':"Supported migrations\r#\r\rCurrently we implemented migration actions for the following resources:\n User Group Role Realm Client UserFederation  For more examples see src/test/resources/changesets.\nTechnical Hints\r#\r\rThe migration hashes are stored in the attribute named \u0026lsquo;migration\u0026rsquo; in the migration user.\nThere are no transactions in keycloak though if the rollback fails there might be a non deterministic state! If it fails I would like to receive a bug report for this.\nIf you struggle with invalid hashes on a linux-windows setup check the line endings of the json-import files as git might check them out as LF where on windows its CRLF and thus producing the error in hashing.\nIf you are using git you can place the following file into the dir with the json-import-files to reassure that the line ending is always LF.\n.gitattributes:\n** text eol=lf  Hacking\r#\r\rTo start developing on this project you can use the gradle tasks.\nTo start the local development keycloak you can just use the task startLocalKeycloak\nTested with OpenJdk 12 and Keycloak 8.0.2\nUse keycloakmigration through maven dependency\r#\r\rGradle dependency\r#\r\r // https://mvnrepository.com/artifact/de.klg71.keycloakmigration/keycloakmigration compile group: 'de.klg71.keycloakmigration', name: 'keycloakmigration', version: 'x.x.x'  Usage\r#\r\rKotlin\nclass MyMigrationArgs(private val adminUser: String, private val adminPassword: String, private val migrationFile: String, private val baseUrl: String, private val realm: String, private val clientId: String, private val correctHashes: Boolean, private val parameters: Map\u0026lt;String, String\u0026gt;) : MigrationArgs { override fun adminUser() = adminUser override fun adminPassword() = adminPassword override fun baseUrl() = baseUrl override fun migrationFile() = migrationFile override fun realm() = realm override fun clientId() = clientId override fun correctHashes() = correctHashes override fun parameters() = parameters } class KeycloakMigrationExecution { fun migrate() { MyMigrationArgs(\u0026quot;admin\u0026quot;, \u0026quot;adminPass\u0026quot;, \u0026quot;keycloak-changelog.yml\u0026quot;, \u0026quot;https://myauthserver\u0026quot;, \u0026quot;master\u0026quot;, \u0026quot;admin-cli\u0026quot;, false, emptyMap()) .let { de.klg71.keycloakmigration.migrate(it) } } }  TODOS\r#\r\r Add more commands Add sophisticated unit and integration Tests batch updates for users  "});index.add({'id':1,'href':'/keycloakmigration/migrations/clientmigrations/','title':"Client Migrations",'content':"addSimpleClient\r#\r\rSimple command to add a client to keycloak, TODO: add more fields\nParameter\r#\r\r realm: String, optional clientId: String, not optional, enabled: Boolean, optional, default=true attributes: Map\u0026lt; String, String\u0026gt;, optional, default = empty protocol: String, optional, default=\u0026quot;openid-connect\u0026rdquo; secret: String, optional publicClient: Boolean, optional, default=true redirectUris: List\u0026lt; String\u0026gt;, optional, default=empty  Example\r#\r\rid: add-simple-client\rauthor: klg71\rchanges:\r- addSimpleClient:\rrealm: master\rclientId: test\r deleteClient\r#\r\rDelete a client in keycloak\nParameter\r#\r\r realm: String, optional clientId: String, not optional,  Example\r#\r\rid: delete-client\rauthor: klg71\rchanges:\r- deleteClient:\rrealm: master\rclientId: test\r importClient\r#\r\rImports a client using the json representation.\nParameters\r#\r\r realm: String, optional clientRepresentationJsonFilename: String, not optional relativeToFile: Boolean, optional, default=true  Example\r#\r\rid: import-client\rauthor: klg71\rchanges:\r- importClient:\rrealm: master\rclientRepresentationJsonFilename: client.json\rrelativeToFile: true\r updateClient\r#\r\rUpdate a client\nParameters\r#\r\r realm: String, optional clientId: String, not optional name: String, optional, default=no change description: String, optional, default=no change enabled: Boolean, optional, default=no change attributes: Map\u0026lt;String, String\u0026gt;, optional, default=no change protocol: String, optional, default=no change redirectUris: List\u0026lt; String\u0026gt;, optional, default=no change bearerOnly: Boolean, optional, default=no change directAccessGrantEnabled: Boolean, optional, default=no change implicitFlowEnabled: Boolean, optional, default=no change standardFlowEnabled: Boolean, optional, default=no change adminUrl: String, optional, default=no change baseUrl: String, optional, default=no change rootUrl: String, optional, default=no change publicClient: Boolean, optional, default=no change serviceAccountsEnabled: Boolean, optional, default=no change webOrigins: List\u0026lt; String\u0026gt;, optional, default=no change  Example\r#\r\rid: update-client\rauthor: klg71\rchanges:\r- updateClient:\rrealm: master\rclientId: testClient\rredirectUris: - http://localhost:8080\r- https://www.example.com\r assignRoleToClient\r#\r\rAssigns a realm- or client-role(if roleClientId is set) to a service account of a client.\nParameters\r#\r\r realm: String, optional clientId: String, not optional role: String, not optional roleClientId: String, optional, default = realmRole  Example\r#\r\rid: add-client-roles\rauthor: klg71\rrealm: integ-test\rchanges:\r- addSimpleClient:\rclientId: testClientRoles\r- updateClient:\rclientId: testClientRoles\rserviceAccountsEnabled: true\rpublicClient: false\r- assignRoleToClient:\rclientId: testClientRoles\rrole: query-users\rroleClientId: realm-management\r addMapper\r#\r\radds a full configurable clientmapper, throws error if client or realm doesn\u0026rsquo;t exist or mapper with same name already exists\n Only use this action if you can\u0026rsquo;t find a convenient method to add the mapper below\n Parameters\r#\r\r realm: String, optional clientId: String, not optional name: String, not optional config: Map\u0026lt;String,String\u0026gt;, not optional protocolMapper: String, not optional protocol: String, optional, default=\u0026quot;openid-connect\u0026rdquo;  Example:\r#\r\rid: add-client-mappers\rauthor: klg71\rrealm: integ-test\rchanges:\r- addSimpleClient:\rclientId: testMappers\r- addMapper:\rclientId: testMappers\rname: testPropertyMapper\rprotocolMapper: oidc-usermodel-property-mapper\rconfig:\raccess.token.claim: true\rid.token.claim: false\ruserinfo.token.claim: false\rclaim.name: customPropertyMapper\rjsonType.label: String\ruser.attribute: UserModel.getEmail()\r addAudienceMapper\r#\r\radds a audience clientmapper, throws error if client or realm doesn\u0026rsquo;t exist or mapper with same name already exists\nParameters\r#\r\r realm: String, optional clientId: String, not optional name: String, not optional addToIdToken: Boolean , optional, default = true, addToAccessToken: Boolean, optional, default = true, clientAudience: String, optional, default = \u0026ldquo;\u0026rdquo;, customAudience: String, optional, default = \u0026quot;\u0026rdquo;  Example:\r#\r\rid: add-client-mappers\rauthor: klg71\rrealm: integ-test\rchanges:\r- addSimpleClient:\rclientId: testMappers\r- addAudienceMapper:\rclientId: testMappers\rname: audienceMapper\raddToIdToken: false\rclientAudience: testMappers\rcustomAudience: completlyCustom\r addGroupMembershipMapper\r#\r\radds a group-membership clientmapper, throws error if client or realm doesn\u0026rsquo;t exist or mapper with same name already exists\nParameters\r#\r\r realm: String, optional clientId: String, not optional name: String, not optional addToIdToken: Boolean , optional, default = true, addToAccessToken: Boolean, optional, default = true, addToUserInfo: Boolean, optional, default = true, fullGroupPath: Boolean, optional, default = true, claimName: String?, optional, default = \u0026laquo; name parameter\u0026raquo;  Example:\r#\r\rid: add-client-mappers\rauthor: klg71\rrealm: integ-test\rchanges:\r- addSimpleClient:\rclientId: testMappers\r- addGroupMembershipMapper:\rclientId: testMappers\rname: groupMembership\raddToAccessToken: false\rclaimName: groupClaim\r addUserAttributeMapper\r#\r\radds a user-attribute clientmapper, throws error if client or realm doesn\u0026rsquo;t exist or mapper with same name already exists\nParameters\r#\r\r realm: String, optional clientId: String, not optional name: String, not optional userAttribute: String, not optional addToIdToken: Boolean , optional, default = true, addToAccessToken: Boolean, optional, default = true, addToUserInfo: Boolean, optional, default = true, claimName: String?, optional, default = \u0026laquo; name parameter\u0026raquo;  Example:\r#\r\rid: add-client-mappers\rauthor: klg71\rrealm: integ-test\rchanges:\r- addSimpleClient:\rclientId: testMappers\r- addUserAttributeMapper:\rclientId: testMappers\rname: userAttribute\ruserAttribute: testAttribute\raddToUserInfo: false\r addUserRealmRoleMapper\r#\r\radds a user-realm-role clientmapper, throws error if client or realm doesn\u0026rsquo;t exist or mapper with same name already exists\nParameters\r#\r\r realm: String, optional clientId: String, not optional name: String, not optional addToIdToken: Boolean , optional, default = true, addToAccessToken: Boolean, optional, default = true, addToUserInfo: Boolean, optional, default = true, claimName: String?, optional, default = \u0026laquo; name parameter\u0026raquo; prefix: String, optional, default = \u0026quot;\u0026rdquo;  Example:\r#\r\rid: add-client-mappers\rauthor: klg71\rrealm: integ-test\rchanges:\r- addSimpleClient:\rclientId: testMappers\r- addUserRealmRoleMapper:\rclientId: testMappers\rname: userRealmRole\rprefix: rolePrefix\r "});index.add({'id':2,'href':'/keycloakmigration/migrations/groupmigrations/','title':"Group Migrations",'content':"addGroup\r#\r\rAdds a new group to keycloak. Fails if the group already exists.\nParameters\r#\r\r realm: String, optional name: String, not optional parent: String, default=empty  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- addGroup:\rrealm: master\rname: testGroup\r deleteGroup\r#\r\rRemoves a group from keycloak. Fails if the group does not exist.\nParameters\r#\r\r realm: String, optional name: String, not optional  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- deleteGroup:\rrealm: master\rname: testUser\r updateGroup\r#\r\rUpdates a group from keycloak. Fails if the group does not exist.\nParameters\r#\r\r realm: String, optional name: String, not optional attributes: Map\u0026lt; String,List\u0026lt; String\u0026raquo;, optional, default=existing attributes realmRoles: List\u0026lt; String\u0026gt;, optional, default=existing realm roles clientRoles: Map\u0026lt; String,List\u0026lt; String\u0026raquo;, optional, default=existing client roles, Key of the map is the clientId and the value is a List of roleNames to attach  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- updateGroup:\rrealm: master\rname: child1\rattributes:\rlkz:\r- \u0026quot;1234\u0026quot;\r assignRoleToGroup\r#\r\rAssigns a role to a group in keycloak. Fails if the group or the role does not exist.\nParameters\r#\r\r realm: String, optional role: String, not optional group: String, not optional clientId: String, optional, default=realmRole  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- assignRoleToGroup:\rrealm: integ-test\rrole: parent\rgroup: test3\r revokeRoleFromGroup\r#\r\rRevokes a role from a group in keycloak. Fails if the group or the role does not exist or the role is not assigned to the group.\nParameters\r#\r\r realm: String, optional role: String, not optional group: String, not optional clientId: String, optional, default=realmRole  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- revokeRoleFromGroup:\rrealm: integ-test\rgroup: parent\rrole: test3\r "});index.add({'id':3,'href':'/keycloakmigration/migrations/','title':"Migrations",'content':""});index.add({'id':4,'href':'/keycloakmigration/migrations/realmmigrations/','title':"Realm Migrations",'content':"addRealm\r#\r\radds a Realm, throws error if realm with that id already exists\nParameters\r#\r\r name: String, not optional enabled: Boolean, optional, default=true id: String, optional, default=name  Example\r#\r\rid: add-realm\rauthor: klg71\rchanges:\r- addRealm:\rname: integ-test\r deleteRealm\r#\r\rdeletes a Realm, throws error if realm with that id does not exists\nParameters\r#\r\r id: String, not optional  Example\r#\r\rid: add-realm\rauthor: klg71\rchanges:\r- deleteRealm:\rid: integ-test\r updateRealm\r#\r\rupdates a Realm, throws error if realm with that id does not exists\nParameters\r#\r\r id: String, not optional realmName: String, optional displayName:String, optional displayNameHtml:String, optional revokeRefreshToken:Boolean, optional refreshTokenMaxReuse:Int, optional accessTokenLifespan:Int, optional accessTokenLifespanForImplicitFlow:Int, optional ssoSessionIdleTimeout:Int, optional ssoSessionMaxLifespan:Int, optional ssoSessionIdleTimeoutRememberMe:Int, optional ssoSessionMaxLifespanRememberMe:Int, optional offlineSessionIdleTimeout:Int, optional offlineSessionMaxLifespanEnabled:Boolean, optional offlineSessionMaxLifespan:Int, optional accessCodeLifespan:Int, optional accessCodeLifespanUserAction:Int, optional accessCodeLifespanLogin:Int, optional actionTokenGeneratedByAdminLifespan:Int, optional actionTokenGeneratedByUserLifespan:Int, optional enabled:Boolean, optional sslRequired:String, optional registrationAllowed:Boolean, optional registrationEmailAsUsername:Boolean, optional rememberMe:Boolean, optional verifyEmail:Boolean, optional loginWithEmailAllowed:Boolean, optional duplicateEmailsAllowed:Boolean, optional resetPasswordAllowed:Boolean, optional editUsernameAllowed:Boolean, optional bruteForceProtected:Boolean, optional permanentLockout:Boolean, optional maxFailureWaitSeconds:Int, optional minimumQuickLoginWaitSeconds:Int, optional waitIncrementSeconds:Int, optional quickLoginCheckMilliSeconds:Int, optional maxDeltaTimeSeconds:Int, optional failureFactor:Int, optional defaultRoles:List\u0026lt; String\u0026gt;, optional requiredCredentials:List\u0026lt; String\u0026gt;, optional otpPolicyType:String, optional otpPolicyAlgorithm:String, optional otpPolicyInitialCounter:Int, optional otpPolicyDigits:Int, optional otpPolicyLookAheadWindow:Int, optional otpPolicyPeriod:Int, optional otpSupportedApplications:List\u0026lt; String\u0026gt;, optional webAuthnPolicyRpEntityName:String, optional webAuthnPolicySignatureAlgorithms:List\u0026lt; String\u0026gt;, optional webAuthnPolicyRpId:String, optional webAuthnPolicyAttestationConveyancePreference:String, optional webAuthnPolicyAuthenticatorAttachment:String, optional webAuthnPolicyRequireResidentKey:String, optional webAuthnPolicyUserVerificationRequirement:String, optional webAuthnPolicyCreateTimeout:Int, optional webAuthnPolicyAvoidSameAuthenticatorRegister:Boolean, optional webAuthnPolicyAcceptableAaguids:List\u0026lt; String\u0026gt;, browserSecurityHeaders:Map\u0026lt;String,String\u0026gt;, optional smtpServer:Map\u0026lt;String,String\u0026gt;, optional eventsEnabled:Boolean, optional eventsListeners:List\u0026lt; String\u0026gt;, optional enabledEventTypes:List\u0026lt; String\u0026gt;, optional adminEventsEnabled:Boolean, optional adminEventsDetailsEnabled:Boolean, optional internationalizationEnabled:Boolean, optional supportedLocales:List\u0026lt; String\u0026gt;, optional browserFlow:String, optional registrationFlow:String, optional directGrantFlow:String, optional resetCredentialsFlow:String, optional clientAuthenticationFlow:String, optional dockerAuthenticationFlow:String, optional attributes:Map\u0026lt;String,String\u0026gt;, optional (Map gets merged if attributes are not present in yaml). Following keys are supported in keycloak 8.0.1:  webAuthnPolicyAuthenticatorAttachment _browser_header.xRobotsTag webAuthnPolicyRpEntityName failureFactor actionTokenGeneratedByUserLifespan maxDeltaTimeSeconds webAuthnPolicySignatureAlgorithms frontendUrl offlineSessionMaxLifespan _browser_header.contentSecurityPolicyReportOnly bruteForceProtected _browser_header.contentSecurityPolicy _browser_header.xXSSProtection _browser_header.xFrameOptions _browser_header.strictTransportSecurity webAuthnPolicyUserVerificationRequirement permanentLockout quickLoginCheckMilliSeconds webAuthnPolicyCreateTimeout webAuthnPolicyRequireResidentKey webAuthnPolicyRpId webAuthnPolicyAttestationConveyancePreference maxFailureWaitSeconds minimumQuickLoginWaitSeconds webAuthnPolicyAvoidSameAuthenticatorRegister _browser_header.xContentTypeOptions actionTokenGeneratedByAdminLifespan waitIncrementSeconds offlineSessionMaxLifespanEnabled   userManagedAccessAllowed:Boolean, optional  Example\r#\r\rid: update-realm\rauthor: klg71\rchanges:\r- updateRealm:\rid: integ-test\rdisplayName: UpdatedRealm\r "});index.add({'id':5,'href':'/keycloakmigration/migrations/rolemigrations/','title':"Role Migrations",'content':"addRole\r#\r\rAdd a role to keycloak, fails if the role already exists\nParameter\r#\r\r realm: String, optional name: String, not optional, clientId: String, optional, default=realmRole, description: String, optional, default=\u0026rdquo;\u0026rdquo; attributes: Map\u0026lt; String,List\u0026lt; String\u0026raquo;, optional, default=empty composite: Boolean, optional, default=false clientRole: Boolean, optional, default=false, containerId: String, optional, default=not set  Example\r#\r\rid: add-role\rauthor: klg71\rchanges:\r- addRole:\rrealm: master\rname: test3\rattributes:\rrole:\r- value1\r- value2\r deleteRole\r#\r\rDelete a role from keycloak, fails if the role does not exist\nParameter\r#\r\r realm: String, optional name: String, not optional, clientId: String, optional, default=realmRole  Example\r#\r\rid: delete-role\rauthor: klg71\rchanges:\r- deleteRole:\rrealm: master\rname: test4\rclientId: test\r "});index.add({'id':6,'href':'/keycloakmigration/migrations/userfederationmigrations/','title':"User Federation Migrations",'content':"AddAdLdap\r#\r\rAdds an active directory to the realm\nParameters\r#\r\r realm: String, optional name: String, not optional config: Map\u0026lt;String, String\u0026gt; values:  connectionUrl, not optional usersDn, not optional bindCredential, not optional bindDn, not optional changedSyncPeriod, optional, default:\u0026ldquo;86400\u0026rdquo; fullSyncPeriod, optional, default:\u0026ldquo;604800\u0026rdquo; useKerberosAuthentication, optional, default: \u0026ldquo;false\u0026rdquo; allowKerberosAuthentication, optional, default: \u0026ldquo;false\u0026rdquo; pagination, optional, default: \u0026ldquo;true\u0026rdquo; readTimeout, optional, default: \u0026quot;\u0026rdquo; connectionTimeout, optional, default: \u0026quot;\u0026rdquo; connectionPooling, optional, default: \u0026ldquo;true\u0026rdquo; useTruststoreSPI, optional, default: \u0026ldquo;ldapsOnly\u0026rdquo; validatePasswordPolicy, optional, default: \u0026ldquo;false\u0026rdquo; searchScope, optional, default: \u0026ldquo;1\u0026rdquo; ldapFilter, optional, default: \u0026quot;\u0026rdquo; authenticationType, optional, default: \u0026ldquo;simple\u0026rdquo; userObjectClasses, optional, default: \u0026ldquo;person, organizationalPerson, user\u0026rdquo; uuidLdapAttribute, optional, default: \u0026ldquo;cn\u0026rdquo; rdnLdapAttribute, optional, default: \u0026ldquo;cn\u0026rdquo; usernameLdapAttribute, optional, default: \u0026ldquo;cn\u0026rdquo; importUsers, optional, default: \u0026ldquo;true\u0026rdquo; editMode, optional, default: \u0026ldquo;READ_ONLY\u0026rdquo; batchSize, optional, default: \u0026ldquo;1000\u0026rdquo; cachePolicy, optional, default: \u0026ldquo;DEFAULT\u0026rdquo; periodicChangedUsersSync, optional, default: \u0026ldquo;false\u0026rdquo; priority, optional, default: \u0026ldquo;0\u0026rdquo;    Example\r#\r\rid: add-ad-ldap\rauthor: klg71\rchanges:\r- addAdLdap:\rrealm: master\rname: testLdap\rconfig: connectionUrl: https://testldap\rusersDN: usersTestDn\rbindCredential: testPassword\rbindDN: testBindDn\r AddAdLdapFullNameMapper\r#\r\rAdds a full name mapper to an active directory ldap, throws an error if the ad doesn\u0026rsquo;t exists or if a mapper with this name already exists in this ad\nParameters\r#\r\r realm: String, optional name: String, not optional adName: String, not optional ldapFullNameAttribute: String, not optional readOnly: Boolean, optional, default = true writeOnly: Boolean, optional, default = false  Example\r#\r\rid: add-ad-ldap-full-name-mapper\rauthor: klg71\rrealm: integ-test\rchanges:\r- addAdLdapFullNameMapper:\rname: testFullNamemapper\radName: testLdap\rldapFullNameAttribute: fullName\r AddAdLdapGroupMapper\r#\r\rAdds a group mapper to an active directory ldap, throws an error if the ad doesn\u0026rsquo;t exists or if a mapper with this name already exists in this ad\nParameters\r#\r\r realm: String, optional name: String, not optional adName: String, not optional groupsDn: String, not optional groupObjectClasses: List\u0026lt; String \u0026gt;, optional, default = emptyList() groupNameLdapAttribute: String, optional, default = \u0026ldquo;cn\u0026rdquo; preserveGroupInheritance: Boolean, optional, default = true, membershipLdapAttribute: String, optional, default = \u0026ldquo;member\u0026rdquo;, membershipAttributeType: String, optional, default = \u0026ldquo;DN\u0026rdquo;, membershipUserLdapAttribute: String, optional, default = \u0026ldquo;cn\u0026rdquo;, filter: String, optional, default = \u0026ldquo;\u0026rdquo;, mode: String, optional, default = \u0026ldquo;READ_ONLY\u0026rdquo;, ignoreMissingGroups: Boolean, optional, default = false, userRolesRetrieveStrategy: String, optional, default = \u0026ldquo;LOAD_GROUPS_BY_MEMBER_ATTRIBUTE\u0026rdquo;, mappedGroupAttributes: List\u0026lt; String \u0026gt;, optional, default = emptyList(), memberofLdapAttribute: String, optional, default = \u0026ldquo;memberOf\u0026rdquo;, dropNonExistingGroupsDuringSync: Boolean, optional, default = false  Example\r#\r\rid: add-ad-ldap-group-mapper\rauthor: klg71\rrealm: integ-test\rchanges:\r- addAdLdapGroupMapper:\rname: testGroupMapper\radName: testLdap\rgroupsDn: groupsDn\r AddAdLdapHardcodedRoleMapper\r#\r\rAdds a hardcoded role mapper to an active directory ldap, throws an error if the ad doesn\u0026rsquo;t exists or if a mapper with this name already exists in this ad. If the given role doesn\u0026rsquo;t exists this command throws an exception.\nParameters\r#\r\r realm: String, optional name: String, not optional adName: String, not optional role: String, not optional  Example\r#\r\rid: add-ad-ldap-hardcoded-role-mapper\rauthor: klg71\rrealm: integ-test\rchanges:\r- addRole:\rname: testMapperRole\r- addAdLdapHardcodedRoleMapper:\rname: testHardcodedRoleMapper\radName: testLdap\rrole: testMapperRole\r AddAdLdapUserControlMapperMapper\r#\r\rAdds a user account control mapper to an active directory ldap, throws an error if the ad doesn\u0026rsquo;t exists or if a mapper with this name already exists in this ad.\nParameters\r#\r\r realm: String, optional name: String, not optional adName: String, not optional  Example\r#\r\rid: add-ad-ldap-user-account-control-mapper\rauthor: klg71\rrealm: integ-test\rchanges:\r- addAdLdapUserAccountControlMapper:\rname: testUserAccountControl\radName: testLdap\r AddAdLdapUserAttributeMapperMapper\r#\r\rAdds a user account attribute mapper to an active directory ldap, throws an error if the ad doesn\u0026rsquo;t exists or if a mapper with this name already exists in this ad.\nParameters\r#\r\r realm: String, optional name: String, not optional adName: String, not optional userModelAttribute: String, not optional ldapAttribute: String, not optional readOnly: Boolean, optional, default = false, alwaysReadFromLdap: Boolean, optional, default = false, isMandatoryInLdap: Boolean, optional, default = false  Example\r#\r\rid: add-ad-ldap-user-attribute-mapper\rauthor: klg71\rrealm: integ-test\rchanges:\r- addAdLdapUserAttributeMapper:\rname: testUserAttributeMapper\radName: testLdap\ruserModelAttribute: userModelAttribute\rldapAttribute: ldapAttribute\r AddAdLdapMapperMapper\r#\r\rAdds a custom mapper to an active directory ldap, throws an error if the ad doesn\u0026rsquo;t exists or if a mapper with this name already exists in this ad.\n Only use this action if you can\u0026rsquo;t find a convenient method to add the mapper above. You can find the correct parameters by using the network debugging tool in chrome/firefox to inspect the requests in the keycloak gui.\n Parameters\r#\r\r realm: String, optional name: String, not optional adName: String, not optional providerId: String, not optional config: Map\u0026lt;String,String\u0026gt;, not optional  Example\r#\r\rid: add-ad-ldap-user-attribute-mapper\rauthor: klg71\rrealm: integ-test\rchanges:\r- addAdLdapMapper:\rname: testRoleMapper\radName: testLdap\rproviderId: role-ldap-mapper\rconfig:\rmemberof.ldap.attribute: \u0026quot;memberOf\u0026quot;\rmembership.attribute.type: \u0026quot;DN\u0026quot;\rmembership.ldap.attribute: \u0026quot;member\u0026quot;\rmembership.user.ldap.attribute: \u0026quot;cn\u0026quot;\rmode: \u0026quot;READ_ONLY\u0026quot;\rrole.name.ldap.attribute: \u0026quot;cn\u0026quot;\rrole.object.classes: \u0026quot;group\u0026quot;\rroles.dn: \u0026quot;rolesDn\u0026quot;\ruse.realm.roles.mapping: \u0026quot;true\u0026quot;\ruser.roles.retrieve.strategy: \u0026quot;LOAD_ROLES_BY_MEMBERSHIP_ATTRIBUTE\u0026quot;\r DeleteUserFederation\r#\r\rDeletes an userFederation from the realm, throws an exception if it doesn\u0026rsquo;t exist.\nParameters\r#\r\r realm: String, optional name: String, not optional  Example\r#\r\rid: delete-ad-ldap\rauthor: klg71\rchanges:\r- deleteUserFederation:\rrealm: integ-test\rname: testLdap\r "});index.add({'id':7,'href':'/keycloakmigration/migrations/usermigrations/','title':"User Migrations",'content':"addUser\r#\r\rAdds a user to keycloak. Fails if a user with that name already exists.\nParameters\r#\r\r realm: String, optional name: String, not optional enabled: Boolean, default=true emailVerified: Boolean, default=true attributes: Map with Layout Map\u0026lt;String, List\u0026lt; String \u0026raquo;, default=empty groups: List of groupnames to attach, List\u0026lt; String \u0026gt;, optional, default=empty realmRoles: List of realmroles to attach, List\u0026lt; String \u0026gt;, optional, default=empty clientRoles: List of ClientRoles to attach, List\u0026lt; ClientRole \u0026gt;, optional, default=empty email: String, optional, default=\u0026rdquo;\u0026rdquo; firstName: String, optional, default=\u0026rdquo;\u0026rdquo; lastName: String, optional, default=\u0026rdquo;\u0026rdquo;  ClientRole Parameters:\n client: ClientId, String, not optional role: Rolename, String, not optional  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- addUser:\rrealm: master\rname: test\renabled: true\remail: test@example.de\remailVerified: true\rattributes:\rtest:\r- test\r- test2\rgroups:\r- testGroup\rrealmRoles:\r- testRealmRole\rclientRoles:\r- client: testClient\rrole: testClientRole\r deleteUser\r#\r\rRemoves a user from keycloak. Fails if a user with that name does not exists.\nParameters\r#\r\r realm: String, optional name: String, not optional  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- deleteUser:\rrealm: master\rname: test\r updateUser\r#\r\rUpdates an exiting user in keycloak. Fails if no user with given name exists.\nParameters\r#\r\r realm: String, optional name: String, not optional enabled: Boolean, default=no change emailVerified: Boolean, default=no change access: String, default=no change notBefore: Long, default=no change totp: Boolean, default=no change disableableCredentialTypes: List\u0026lt; String \u0026gt;, default=no change requiredActions: List\u0026lt; String \u0026gt;, default=no change email: String, default=no change firstName: String, default=no change lastName: String, default=no change credentials: Map\u0026lt;String,String\u0026gt; (see example below)  hashedSaltedValue: String, not optional salt: String, not optional algorithm: String, optional, default = \u0026ldquo;pbkdf2-sha256\u0026rdquo; counter: Int, optional, default = 0, createdDate: Long, optional, default = Date().time, digits: Int, optional, default = 0, hashIterations: Int, optional, default = 27500, period: Int, optional, default = 0, type: String, optional, default = \u0026ldquo;password\u0026rdquo;, config1: Map\u0026lt;String, String\u0026gt;, optional, default = emptyMap() (See keycloak documentation)    Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- updateUser:\rrealm: master\rname: test\renabled: false\rlastName: Lukas\r Example to update Password\r#\r\r If you don\u0026rsquo;t want to hash and generate the salt by youself you can use the updateUserPassword method listed below.\nThis method gives more control over the credential entry in keycloak including hashIterations, algorithms used, digits and additional configs.\nUpdating the credential can not be rolled back!\n id: update-password\rauthor: klg71\rchanges:\r- updateUser:\rrealm: integ-test\rname: test\rcredentials:\r- hashedSaltedValue: 1tWf95Drz6t8/9kKE3tiJXPywCzG/C0KDnmCIFXEDdFQMPB6iVWWxjLO9HJI3YwTfWZa78N+hcmYHcT1tkavcA==\rsalt: dGVzdB==\r Script to generate salt and hash:\r#\r\rimport org.apache.commons.codec.Charsets.UTF_8 import java.util.* import javax.crypto.SecretKeyFactory import javax.crypto.spec.PBEKeySpec fun generatePassword(){ println(\u0026#34;Keycloak password hash helper\u0026#34;) val scanner = Scanner(System.`in`, UTF_8) println(\u0026#34;Enter password:\u0026#34;) val password = scanner.nextLine() println(\u0026#34;Enter salt:\u0026#34;) val salt = scanner.nextLine() val hashIterations = 27500 val keyByteLength = 64 val pass = getEncryptedPassword(password, salt.toByteArray(UTF_8), hashIterations, keyByteLength) println(\u0026#34;Password: $pass\u0026#34;) println(\u0026#34;Salt: \u0026#34; + Base64.getEncoder().encodeToString(salt.toByteArray(UTF_8))) } fun getEncryptedPassword(password: String, salt: ByteArray, iterations: Int, derivedKeyLength: Int): String { return SecretKeyFactory.getInstance(\u0026#34;PBKDF2WithHmacSHA256\u0026#34;).run { generateSecret(PBEKeySpec(password.toCharArray(), salt, iterations, derivedKeyLength * 8) ) }.run { @Suppress(\u0026#34;UsePropertyAccessSyntax\u0026#34;) getEncoded() }.let { Base64.getEncoder().encodeToString(it) } } updateUserPassword\r#\r\rUpdates the passwords of a user\n WARNING: This action can not be rolled back!\n The password is hashed with 27500 hash_iterations and a key_byte_length of 64 bytes.\nParameters\r#\r\r realm: String, optional name: String, not optional password: String, not optional salt: String, optional, default = Random 15 letter alphanumeric String  Example\r#\r\rid: test\rauthor: klg71\rrealm: integ-test\rchanges:\r- addUser:\rname: testPasswordUser\r- updateUserPassword:\rname: testPasswordUser\rpassword: \u0026quot;testPassword\u0026quot;\r addUserAttribute\r#\r\rAdds an attribute to an existing user. Throws an error if the user does not exist.\nUser attributes can\u0026rsquo;t be set deterministic with the updateUser action.\nParameters\r#\r\r realm: String, optional name: String, not optional attributeName: String, not optional attributeValues: List\u0026lt; String\u0026gt;, not optional override: Boolean, default=false  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- addUserAttribute:\rrealm: master\rname: test\rattributeName: test1\rattributeValues:\r- value1\r- value2\r deleteUserAttribute\r#\r\rDeletes an attribute to an existing user. Throws an error if the user does not exist.\nParameters\r#\r\r realm: String, optional name: String, not optional attributeName: String, not optional failOnMissing: Boolean, default=true  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- deleteUserAttribute:\rrealm: master\rname: test\rattributeName: test1\r assignRole\r#\r\rAssigns a role to the given user. Fails if the user or the role doesn\u0026rsquo;t exist.\nParameters\r#\r\r realm: String, optional user: String, not optional role: String, not optional  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- assignRole:\rrealm: master\ruser: testUser\rrole: testRole\r revokeRole\r#\r\rRevokes a role from the given user. Fails if the user or the role doesn\u0026rsquo;t exist or the user does not have the role assigned.\nParameters\r#\r\r realm: String, optional user: String, not optional role: String, not optional  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- revokeRole:\rrealm: master\ruser: testUser\rrole: testRole\r assignGroup\r#\r\rAssigns a group to the given user. Fails if the user or the group doesn\u0026rsquo;t exist.\nParameters\r#\r\r realm: String, optional user: String, not optional group: String, not optional  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- assignGroup:\rrealm: master\ruser: testUser\rgroup: testGroup\r revokeGroup\r#\r\rRevokes a group from the given user. Fails if the user or the group doesn\u0026rsquo;t exist or the user doesnt have the group assigned .\nParameters\r#\r\r realm: String, optional user: String, not optional group: String, not optional  Example\r#\r\rid: test\rauthor: klg71\rchanges:\r- revokeGroup:\rrealm: master\ruser: testUser\rgroup: testGroup\r "});index.add({'id':8,'href':'/keycloakmigration/about/','title':"About Me",'content':"Software Engineer located in Dresden Germany.\nCurrently working at OSP.\nSome of my other Projects:\n Android App for tree management baum.watch Migrations in Keycloak like liquibase: keycloakmigration  Contact me for talks or courses about Java and Kotlin.\n"});})();